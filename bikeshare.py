# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eQY0NHjNq0rKBi6B8XR-qZmZgbI5xt81
"""

import time
import pandas as pd

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')

    def get_valid_input(prompt, options):
        while True:
            user_input = input(prompt).lower()
            if user_input in options:
                return user_input
            else:
                print('Invalid input. Please enter a valid option.')

    city = get_valid_input('Enter the name of the city (Chicago, New York City, Washington): ', CITY_DATA.keys())
    month = get_valid_input('Enter the month to filter by (all, January, February, March, April, May, June): ', ['all', 'january', 'february', 'march', 'april', 'may', 'june'])
    day = get_valid_input('Enter the day of the week to filter by (all, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday): ', ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'])

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['Month'] = df['Start Time'].dt.month
    df['Day of Week'] = df['Start Time'].dt.strftime('%A').str.lower()

    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['Month'] == month]

    if day != 'all':
        df = df[df['Day of Week'] == day.lower()]

    return df


def time_stats(df):
    """
    Displays statistics on the most frequent times of travel.

    Args:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    most_common_month = df['Month'].mode()[0]
    print(f"The most common month: {most_common_month}")

    most_common_day = df['Day of Week'].mode()[0]
    print(f"The most common day of week: {most_common_day}")

    df['hour'] = df['Start Time'].dt.hour
    most_common_hour = df['hour'].mode()[0]
    print(f"The most common start hour: {most_common_hour}")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


# ... (다른 함수들도 위와 같은 방식으로 독스트링 추가)

# ... (이전 내용들은 그대로 유지)

def main():
    """
    Main function to call other functions and execute the program
    """
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)

        restart = input('\nWould you like to restart? Enter yes to continue: ')
        if restart.lower() not in ['yes', 'y']:
            print('Goodbye!')
            break

if __name__ == "__main__":
    main()
